[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "nebari-mlflow-plugin"
dynamic = ["version"]
description = 'MLflow Plugin for Nebari Platform'
readme = "README.md"
requires-python = ">=3.10"
license = "Apache-2.0"
keywords = []
authors = [
  { name = "Adam Lewis", email = "adam.dudley.lewis@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "nebari>=2025.6.1",
]

[dependency-groups]
dev = [
  "coverage[toml]>=6.5",
  "pytest",
  "ruff>=0.0.243",
  "nebari[dev]>=2025.6.1"
]

[project.urls]
# TODO - public location for issues and documentation?
Documentation = "https://github.com/Quansight/nebari-mlflow-plugin#readme"
Issues = "https://github.com/Quansight/nebari-mlflow-plugin/issues"
Source = "https://github.com/Quansight/nebari-mlflow-plugin"

[tool.hatch.version]
source = "vcs"
version-file = "src/nebari_mlflow_plugin/_version.py"

[tool.black]
target-version = ["py310"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py310"
line-length = 120

[tool.ruff.lint]
select = [
  "I",
  # "A",
  # "ARG",
  # "B",
  # "C",
  # "DTZ",
  # "E",
  # "EM",
  # "F",
  # "FBT",
  # "I",
  # "ICN",
  # "ISC",
  # "N",
  # "PLC",
  # "PLE",
  # "PLR",
  # "PLW",
  # "Q",
  # "RUF",
  # "S",
  # "T",
  # "TID",
  # "UP",
  # "W",
  # "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["nebari_mlflow_plugin"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["nebari_mlflow_plugin", "tests"]
branch = true
parallel = true
omit = [
  "src/nebari_mlflow_plugin/__about__.py",
]

[tool.coverage.paths]
nebari_mlflow_plugin = ["src/nebari_mlflow_plugin", "*/src/nebari_mlflow_plugin"]
tests = ["tests", "*/nebari_mlflow_plugin/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[project.entry-points.nebari]
nebari-mlflow-plugin = "nebari_mlflow_plugin"
